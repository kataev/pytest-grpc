# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from pytest_grpc.tests import example_pb2 as pytest__grpc_dot_tests_dot_example__pb2


class EchoServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.handler = channel.unary_unary(
                '/test.v1.EchoService/handler',
                request_serializer=pytest__grpc_dot_tests_dot_example__pb2.EchoRequest.SerializeToString,
                response_deserializer=pytest__grpc_dot_tests_dot_example__pb2.EchoResponse.FromString,
                )
        self.error_handler = channel.unary_unary(
                '/test.v1.EchoService/error_handler',
                request_serializer=pytest__grpc_dot_tests_dot_example__pb2.EchoRequest.SerializeToString,
                response_deserializer=pytest__grpc_dot_tests_dot_example__pb2.EchoResponse.FromString,
                )
        self.blocking = channel.unary_stream(
                '/test.v1.EchoService/blocking',
                request_serializer=pytest__grpc_dot_tests_dot_example__pb2.Empty.SerializeToString,
                response_deserializer=pytest__grpc_dot_tests_dot_example__pb2.EchoResponse.FromString,
                )
        self.unblock = channel.unary_unary(
                '/test.v1.EchoService/unblock',
                request_serializer=pytest__grpc_dot_tests_dot_example__pb2.Empty.SerializeToString,
                response_deserializer=pytest__grpc_dot_tests_dot_example__pb2.Empty.FromString,
                )


class EchoServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def handler(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def error_handler(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def blocking(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def unblock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EchoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'handler': grpc.unary_unary_rpc_method_handler(
                    servicer.handler,
                    request_deserializer=pytest__grpc_dot_tests_dot_example__pb2.EchoRequest.FromString,
                    response_serializer=pytest__grpc_dot_tests_dot_example__pb2.EchoResponse.SerializeToString,
            ),
            'error_handler': grpc.unary_unary_rpc_method_handler(
                    servicer.error_handler,
                    request_deserializer=pytest__grpc_dot_tests_dot_example__pb2.EchoRequest.FromString,
                    response_serializer=pytest__grpc_dot_tests_dot_example__pb2.EchoResponse.SerializeToString,
            ),
            'blocking': grpc.unary_stream_rpc_method_handler(
                    servicer.blocking,
                    request_deserializer=pytest__grpc_dot_tests_dot_example__pb2.Empty.FromString,
                    response_serializer=pytest__grpc_dot_tests_dot_example__pb2.EchoResponse.SerializeToString,
            ),
            'unblock': grpc.unary_unary_rpc_method_handler(
                    servicer.unblock,
                    request_deserializer=pytest__grpc_dot_tests_dot_example__pb2.Empty.FromString,
                    response_serializer=pytest__grpc_dot_tests_dot_example__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'test.v1.EchoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EchoService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def handler(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/test.v1.EchoService/handler',
            pytest__grpc_dot_tests_dot_example__pb2.EchoRequest.SerializeToString,
            pytest__grpc_dot_tests_dot_example__pb2.EchoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def error_handler(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/test.v1.EchoService/error_handler',
            pytest__grpc_dot_tests_dot_example__pb2.EchoRequest.SerializeToString,
            pytest__grpc_dot_tests_dot_example__pb2.EchoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def blocking(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/test.v1.EchoService/blocking',
            pytest__grpc_dot_tests_dot_example__pb2.Empty.SerializeToString,
            pytest__grpc_dot_tests_dot_example__pb2.EchoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def unblock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/test.v1.EchoService/unblock',
            pytest__grpc_dot_tests_dot_example__pb2.Empty.SerializeToString,
            pytest__grpc_dot_tests_dot_example__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
